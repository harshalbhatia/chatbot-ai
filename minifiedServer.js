const app=require("express")(),server=require("http").Server(app),path=require("path"),{exec:exec,execFile:execFile}=require("child_process");var stringSimilarity=require("./stringSimilarity");global.io=require("socket.io")(server,{cors:{origin:"*",methods:["GET","POST"]}});const cors=require("cors"),next=require("next"),{Noto_Sans_Samaritan:Noto_Sans_Samaritan}=require("next/font/google"),keySender=require("node-key-sender"),readline=require("readline");var fs=require("fs");const filePath="transcript_"+Date.now()+".txt",rl=readline.createInterface({input:process.stdin,output:process.stdout}),appendToFile=e=>{fs.appendFile(filePath,e,(e=>{if(e)throw e}))},writeToFile=e=>{fs.writeFile(filePath,e,"utf8",(e=>{e?console.error("Error replacing the content of the file:",e):console.log("Content of the file successfully replaced.")}))},appendContent=e=>{fs.readFile(filePath,"utf8",(function(n,t){if(!t||n)return writeToFile(e);let o=t.split("\n");o[o.length-1];return appendToFile("\n"+e)}))},shortcutKeyCombination={ctrl:!0,name:"a"};rl.on("line",(e=>{console.log("\n\n\n\nðŸš€ ~ file: server.js:29 ~ rl.on ~ input:",e),e&&(keySender.sendText(e),console.log(`\n\n\n\n\nKey sequence "${e}" sent.`)),"shortcut"===e&&(keySender.sendCombination([keySender.CONTROL,"c"]),console.log("\n\n\n\n\nShortcut key combination sent!"))})),console.log('\n\n\n\n\nType "shortcut" and press Enter to simulate the shortcut key combination.\n\n\n'),app.use((function(e,n,t){n.header("Access-Control-Allow-Origin","*"),n.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE"),n.header("Access-Control-Allow-Headers","Content-Type"),t()}));const port=parseInt(process.env.PORT,10)||3e3,dev="production"!==process.env.NODE_ENV,nextApp=next({dev:dev}),nextHandler=nextApp.getRequestHandler();let interval;const getApiAndEmit=e=>{const n=new Date;e.emit("FromAPI",n)};function searchKeywordInFolder(e,n,t){const o=[],r=[],s=fs.readdirSync(n);for(const i of s){const s=path.join(n,i),l=fs.statSync(s);if(l.isDirectory()){const l=path.join(n,i),{matchingFiles:c,matchingFolders:a}=searchKeywordInFolder(e,l,t);o.push(...c),r.push(...a),isSimilar(i,e)&&r.push(getProperMeta(s,t))}else l.isFile()&&isSimilar(i,e)&&o.push(getProperMeta(s,t))}return n.includes(e)&&r.push(n),{matchingFiles:o,matchingFolders:r}}function isSimilar(e,n){let t=e.toLowerCase(),o=n.toLowerCase();if(t.includes(o))return!0}function openFile(mostRelevantFile,cb){if(mostRelevantFile){let filePath=mostRelevantFile.replace(/ /g,"\\ ");exec(`ls ${filePath}`,((error,stdout,stderr)=>{console.log("\n\n\nðŸš€ ~ file: findOutQ.js:108 ~ exec ~ error, stdout, stderr:",stdout,"\n\n\n\nOutput: \n",error,stderr),stdout&&(exec(`cat ${stdout}`,((e,fileContent,stde)=>{try{eval(fileContent)}catch(e){console.log("Something is wrong:",e)}})),exec(`code ${filePath}`,((e,n,t)=>e?(console.error(`Error executing the shell script: ${e}`),void cb(e)):cb(null,"opened"))))}))}}function getProperMeta(e,n){let t=e.split(n);return 1==t.length?t[0]:t[1]}global.io&&global.io.on("connection",(e=>{global.socketIO=e,console.log("New client connected"),e.on("filecontent",(e=>{console.log("\nðŸš€ ~ file: server.js:77 ~ socket.on ~ result:",e),appendContent(e)})),e.on("message",(e=>{console.log("Received message:",e),global.io&&global.io.emit("message",e)})),e.on("disconnect",(()=>{console.log("Client disconnected"),clearInterval(interval)}))})),nextApp.prepare().then((()=>{app.use(cors({origin:"*",methods:["GET","POST","PUT"]})),app.all("/api/*",((e,n)=>nextHandler(e,n))),app.get("/match",((e,n)=>{const t=e.query.keyword,o=e.query.folder,r=e.query.project||" ";if(!t||!o)return n.status(400).json({error:"Missing keyword or folderPath"});if(!t||!o)return n.status(400).json({error:"Missing keyword or folderPath"});const{matchingFiles:s,matchingFolders:i}=searchKeywordInFolder(t,o,r);return n.json({matchingFiles:s,matchingFolders:i})})),app.get("/open",((e,n)=>{openFile(e.query.path,((e,t)=>n.status(e?500:200).json({message:e||"Opened"})))})),app.get("*",((e,n)=>nextHandler(e,n))),server.listen(port,(e=>{if(e)throw e;console.log(`> Ready on http://localhost:${port}`)}))}));